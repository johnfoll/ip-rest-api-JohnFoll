using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using NetTools;

namespace WebMvc5.Models
{
    public class IpAdressList
    {

        public List<IPAddress> Ip_Addresses = new List<IPAddress>();

        public void CreateIPAddresses(string IpAddress1)
        {
            if (IpAddress1.Contains("/"))
            {
                //string[] Split = IpAddress1.Split('/');
                //string IPAddr = Split[0];
                //string CidrBock = Split[1];
                var rangeA = IPAddressRange.Parse(IpAddress1);
                foreach (var ip in rangeA)
                {
                    IPAddress IPAddress = new IPAddress() { Address = ip.ToString(), Status = IPAddress.IPStatus.acquired };
                    Ip_Addresses.Add(IPAddress);
                }
            }
            else
            {
                IPAddress IPAddress = new IPAddress() { Address = IpAddress1, Status = IPAddress.IPStatus.acquired };
                Ip_Addresses.Add(IPAddress);
            }
        }

        public void CreateSpecificIPAddresses()
        {
            CreateIPAddresses("192.168.0.1/24");
        }

        //# IP Address Management REST API
        //        Create a simple IP Address Management REST API on top of any data store.
        //        It will include the ability to add IP Addresses by CIDR block and then either acquire or release IP addresses individually.
        //        Each IP address will have a status associated with it that is either “available” or “acquired”. 
        //        The REST API must support four endpoint:
        //  * **Create IP addresses** - take in a CIDR block (e.g. 10.0.0.1/24) and add all IP addresses within that block to the data store with status “available”
        //  * **List IP addresses** - return all IP addresses in the system with their current status
        //  * **Acquire an IP** - set the status of a certain IP to “acquired”
        //  * **Release an IP** - set the status of a certain IP to “available”
    }
}
